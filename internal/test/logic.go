package test

// Don't edit this file.
// This file is generated by gomic 0.5.2.
// https://github.com/suzuki-shunsuke/gomic

import (
	"context"
	"io"
	testing "testing"

	"github.com/scylladb/go-set/strset"
	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// Logic is a mock.
	Logic struct {
		t                      *testing.T
		name                   string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl                   struct {
			Check                func(stdin io.Reader, cfgPath string) error
			IsIgnoredURL         func(uri string) bool
			CheckURLs            func(urls map[string]*strset.Set) error
			CheckURLWithMethod   func(ctx context.Context, u, method string) error
			CheckURL             func(ctx context.Context, u string) error
			ExtractURLsFromFiles func(files *strset.Set) (map[string]*strset.Set, error)
			ExtractURLsFromFile  func(ctx context.Context, p string) (*strset.Set, error)
			GetFiles             func(stdin io.Reader) (*strset.Set, error)
		}
	}
)

// NewLogic returns Logic .
func NewLogic(t *testing.T, cb gomic.CallbackNotImplemented) *Logic {
	return &Logic{
		t: t, name: "Logic", callbackNotImplemented: cb}
}

// Check is a mock method.
func (mock Logic) Check(stdin io.Reader, cfgPath string) error {
	methodName := "Check" // nolint: goconst
	if mock.impl.Check != nil {
		return mock.impl.Check(stdin, cfgPath)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroCheck(stdin, cfgPath)
}

// SetFuncCheck sets a method and returns the mock.
func (mock *Logic) SetFuncCheck(impl func(stdin io.Reader, cfgPath string) error) *Logic {
	mock.impl.Check = impl
	return mock
}

// SetReturnCheck sets a fake method.
func (mock *Logic) SetReturnCheck(r0 error) *Logic {
	mock.impl.Check = func(io.Reader, string) error {
		return r0
	}
	return mock
}

// fakeZeroCheck is a fake method which returns zero values.
func (mock Logic) fakeZeroCheck(stdin io.Reader, cfgPath string) error {
	var (
		r0 error
	)
	return r0
}

// IsIgnoredURL is a mock method.
func (mock Logic) IsIgnoredURL(uri string) bool {
	methodName := "IsIgnoredURL" // nolint: goconst
	if mock.impl.IsIgnoredURL != nil {
		return mock.impl.IsIgnoredURL(uri)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroIsIgnoredURL(uri)
}

// SetFuncIsIgnoredURL sets a method and returns the mock.
func (mock *Logic) SetFuncIsIgnoredURL(impl func(uri string) bool) *Logic {
	mock.impl.IsIgnoredURL = impl
	return mock
}

// SetReturnIsIgnoredURL sets a fake method.
func (mock *Logic) SetReturnIsIgnoredURL(r0 bool) *Logic {
	mock.impl.IsIgnoredURL = func(string) bool {
		return r0
	}
	return mock
}

// fakeZeroIsIgnoredURL is a fake method which returns zero values.
func (mock Logic) fakeZeroIsIgnoredURL(uri string) bool {
	var (
		r0 bool
	)
	return r0
}

// CheckURLs is a mock method.
func (mock Logic) CheckURLs(urls map[string]*strset.Set) error {
	methodName := "CheckURLs" // nolint: goconst
	if mock.impl.CheckURLs != nil {
		return mock.impl.CheckURLs(urls)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroCheckURLs(urls)
}

// SetFuncCheckURLs sets a method and returns the mock.
func (mock *Logic) SetFuncCheckURLs(impl func(urls map[string]*strset.Set) error) *Logic {
	mock.impl.CheckURLs = impl
	return mock
}

// SetReturnCheckURLs sets a fake method.
func (mock *Logic) SetReturnCheckURLs(r0 error) *Logic {
	mock.impl.CheckURLs = func(map[string]*strset.Set) error {
		return r0
	}
	return mock
}

// fakeZeroCheckURLs is a fake method which returns zero values.
func (mock Logic) fakeZeroCheckURLs(urls map[string]*strset.Set) error {
	var (
		r0 error
	)
	return r0
}

// CheckURLWithMethod is a mock method.
func (mock Logic) CheckURLWithMethod(ctx context.Context, u, method string) error {
	methodName := "CheckURLWithMethod" // nolint: goconst
	if mock.impl.CheckURLWithMethod != nil {
		return mock.impl.CheckURLWithMethod(ctx, u, method)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroCheckURLWithMethod(ctx, u, method)
}

// SetFuncCheckURLWithMethod sets a method and returns the mock.
func (mock *Logic) SetFuncCheckURLWithMethod(impl func(ctx context.Context, u, method string) error) *Logic {
	mock.impl.CheckURLWithMethod = impl
	return mock
}

// SetReturnCheckURLWithMethod sets a fake method.
func (mock *Logic) SetReturnCheckURLWithMethod(r0 error) *Logic {
	mock.impl.CheckURLWithMethod = func(context.Context, string, string) error {
		return r0
	}
	return mock
}

// fakeZeroCheckURLWithMethod is a fake method which returns zero values.
func (mock Logic) fakeZeroCheckURLWithMethod(ctx context.Context, u, method string) error {
	var (
		r0 error
	)
	return r0
}

// CheckURL is a mock method.
func (mock Logic) CheckURL(ctx context.Context, u string) error {
	methodName := "CheckURL" // nolint: goconst
	if mock.impl.CheckURL != nil {
		return mock.impl.CheckURL(ctx, u)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroCheckURL(ctx, u)
}

// SetFuncCheckURL sets a method and returns the mock.
func (mock *Logic) SetFuncCheckURL(impl func(ctx context.Context, u string) error) *Logic {
	mock.impl.CheckURL = impl
	return mock
}

// SetReturnCheckURL sets a fake method.
func (mock *Logic) SetReturnCheckURL(r0 error) *Logic {
	mock.impl.CheckURL = func(context.Context, string) error {
		return r0
	}
	return mock
}

// fakeZeroCheckURL is a fake method which returns zero values.
func (mock Logic) fakeZeroCheckURL(ctx context.Context, u string) error {
	var (
		r0 error
	)
	return r0
}

// ExtractURLsFromFiles is a mock method.
func (mock Logic) ExtractURLsFromFiles(files *strset.Set) (map[string]*strset.Set, error) {
	methodName := "ExtractURLsFromFiles" // nolint: goconst
	if mock.impl.ExtractURLsFromFiles != nil {
		return mock.impl.ExtractURLsFromFiles(files)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroExtractURLsFromFiles(files)
}

// SetFuncExtractURLsFromFiles sets a method and returns the mock.
func (mock *Logic) SetFuncExtractURLsFromFiles(impl func(files *strset.Set) (map[string]*strset.Set, error)) *Logic {
	mock.impl.ExtractURLsFromFiles = impl
	return mock
}

// SetReturnExtractURLsFromFiles sets a fake method.
func (mock *Logic) SetReturnExtractURLsFromFiles(r0 map[string]*strset.Set, r1 error) *Logic {
	mock.impl.ExtractURLsFromFiles = func(*strset.Set) (map[string]*strset.Set, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroExtractURLsFromFiles is a fake method which returns zero values.
func (mock Logic) fakeZeroExtractURLsFromFiles(files *strset.Set) (map[string]*strset.Set, error) {
	var (
		r0 map[string]*strset.Set
		r1 error
	)
	return r0, r1
}

// ExtractURLsFromFile is a mock method.
func (mock Logic) ExtractURLsFromFile(ctx context.Context, p string) (*strset.Set, error) {
	methodName := "ExtractURLsFromFile" // nolint: goconst
	if mock.impl.ExtractURLsFromFile != nil {
		return mock.impl.ExtractURLsFromFile(ctx, p)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroExtractURLsFromFile(ctx, p)
}

// SetFuncExtractURLsFromFile sets a method and returns the mock.
func (mock *Logic) SetFuncExtractURLsFromFile(impl func(ctx context.Context, p string) (*strset.Set, error)) *Logic {
	mock.impl.ExtractURLsFromFile = impl
	return mock
}

// SetReturnExtractURLsFromFile sets a fake method.
func (mock *Logic) SetReturnExtractURLsFromFile(r0 *strset.Set, r1 error) *Logic {
	mock.impl.ExtractURLsFromFile = func(context.Context, string) (*strset.Set, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroExtractURLsFromFile is a fake method which returns zero values.
func (mock Logic) fakeZeroExtractURLsFromFile(ctx context.Context, p string) (*strset.Set, error) {
	var (
		r0 *strset.Set
		r1 error
	)
	return r0, r1
}

// GetFiles is a mock method.
func (mock Logic) GetFiles(stdin io.Reader) (*strset.Set, error) {
	methodName := "GetFiles" // nolint: goconst
	if mock.impl.GetFiles != nil {
		return mock.impl.GetFiles(stdin)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroGetFiles(stdin)
}

// SetFuncGetFiles sets a method and returns the mock.
func (mock *Logic) SetFuncGetFiles(impl func(stdin io.Reader) (*strset.Set, error)) *Logic {
	mock.impl.GetFiles = impl
	return mock
}

// SetReturnGetFiles sets a fake method.
func (mock *Logic) SetReturnGetFiles(r0 *strset.Set, r1 error) *Logic {
	mock.impl.GetFiles = func(io.Reader) (*strset.Set, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroGetFiles is a fake method which returns zero values.
func (mock Logic) fakeZeroGetFiles(stdin io.Reader) (*strset.Set, error) {
	var (
		r0 *strset.Set
		r1 error
	)
	return r0, r1
}
