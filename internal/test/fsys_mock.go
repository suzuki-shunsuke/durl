package test

// Don't edit this file.
// This file is generated by gomic 0.5.2.
// https://github.com/suzuki-shunsuke/gomic

import (
	"io"
	testing "testing"

	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// Fsys is a mock.
	Fsys struct {
		t *testing.T
		name string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl struct {
				Open func(p0 string) (io.ReadCloser, error)
		}
	}
)

// NewFsys returns Fsys .
func NewFsys(t *testing.T, cb gomic.CallbackNotImplemented) *Fsys {
	return &Fsys{
		t: t, name: "Fsys", callbackNotImplemented: cb}
}

// Open is a mock method.
func (mock Fsys) Open(p0 string) (io.ReadCloser, error) {
	methodName := "Open"  // nolint: goconst
	if mock.impl.Open != nil {
		return mock.impl.Open(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroOpen(p0)
}

// SetFuncOpen sets a method and returns the mock.
func (mock *Fsys) SetFuncOpen(impl func(p0 string) (io.ReadCloser, error)) *Fsys {
	mock.impl.Open = impl
	return mock
}


// SetReturnOpen sets a fake method.
func (mock *Fsys) SetReturnOpen(r0 io.ReadCloser, r1 error) *Fsys {
	mock.impl.Open = func(string) (io.ReadCloser, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroOpen is a fake method which returns zero values.
func (mock Fsys) fakeZeroOpen(p0 string) (io.ReadCloser, error) {
	var (
		r0 io.ReadCloser
		r1 error
	)
	return r0, r1
}

