package test

// Don't edit this file.
// This file is generated by gomic 0.5.2.
// https://github.com/suzuki-shunsuke/gomic

import (
	"net/http"
	testing "testing"

	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// HTTPClient is a mock.
	HTTPClient struct {
		t                      *testing.T
		name                   string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl                   struct {
			Do func(req *http.Request) (*http.Response, error)
		}
	}
)

// NewHTTPClient returns HTTPClient .
func NewHTTPClient(t *testing.T, cb gomic.CallbackNotImplemented) *HTTPClient {
	return &HTTPClient{
		t: t, name: "HTTPClient", callbackNotImplemented: cb}
}

// Do is a mock method.
func (mock HTTPClient) Do(req *http.Request) (*http.Response, error) {
	methodName := "Do" // nolint: goconst
	if mock.impl.Do != nil {
		return mock.impl.Do(req)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroDo(req)
}

// SetFuncDo sets a method and returns the mock.
func (mock *HTTPClient) SetFuncDo(impl func(req *http.Request) (*http.Response, error)) *HTTPClient {
	mock.impl.Do = impl
	return mock
}

// SetReturnDo sets a fake method.
func (mock *HTTPClient) SetReturnDo(r0 *http.Response, r1 error) *HTTPClient {
	mock.impl.Do = func(*http.Request) (*http.Response, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroDo is a fake method which returns zero values.
func (mock HTTPClient) fakeZeroDo(req *http.Request) (*http.Response, error) {
	var (
		r0 *http.Response
		r1 error
	)
	return r0, r1
}
